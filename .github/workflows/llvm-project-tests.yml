name: LLVM Project Tests

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      build_target:
        required: false
      projects:
        required: false
      runtimes:
        required: false
      extra_cmake_args:
        required: false
  workflow_call:
    inputs:
      build_target:
        required: false
        type: string
        default: "all"

      projects:
        required: true
        type: string
      runtimes:
        required: false
        type: string

      extra_cmake_args:
        required: false
        type: string


concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  # If the group name here is the same as the group name in the workflow that includes
  # this one, then the action will try to wait on itself and get stuck.
  group: llvm-project-${{ github.workflow }}-${{ inputs.projects }}${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  lit-tests:
    name: Lit Tests
    runs-on: aah
    steps:
      - name: Build and Test
        shell: bash
        id: build-llvm
        run: |
          builddir="/home/runner/build"
          mkdir -p $builddir
          extra_cmake_args="-DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang"
         
          
          echo "llvm-builddir=$builddir" >> "$GITHUB_OUTPUT"
          cmake -G Ninja \
                -B "$builddir" \
                -S llvm \
                -DLLVM_ENABLE_PROJECTS="${{ inputs.projects }}" \
                -DLLVM_ENABLE_RUNTIMES="${{ inputs.runtimes }}" \
                -DCMAKE_BUILD_TYPE=DEBUG \
                -DLLVM_ENABLE_ASSERTIONS=ON \
                -DLLDB_INCLUDE_TESTS=OFF \
                -DLLVM_USE_SANITIZER=Undefined \
                -DCMAKE_CXX_FLAGS="-gline-tables-only -O1" \
                -DCMAKE_C_FLAGS="-gline-tables-only -O1" \
                -DLLVM_USE_LINKER=mold \
              $extra_cmake_args \
                ${{ inputs.extra_cmake_args }}
          ninja -C "$builddir" '${{ inputs.build_target }}'

      - name: Test Clang
        shell: bash
        run: |
          builddir=$(grep llvm-builddir "$GITHUB_OUTPUT" | cut -d= -f2)
          ninja -C "$builddir" check-clang

      - name: Test libc++
        shell: bash
        run: |
          builddir=$(grep llvm-builddir "$GITHUB_OUTPUT" | cut -d= -f2)
          ninja -C "$builddir" check-cxx
      
        
          
          
